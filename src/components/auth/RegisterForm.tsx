'use client';
import { useState } from 'react';

const AREAS = [
  '–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω',
  '–ê—É—ç–∑–æ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω',
  '–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π —Ä–∞–π–æ–Ω',
  '–ñ–µ—Ç—ã—Å—É—Å–∫–∏–π —Ä–∞–π–æ–Ω',
  '–ú–µ–¥–µ—É—Å–∫–∏–π —Ä–∞–π–æ–Ω',
  '–ù–∞—É—Ä—ã–∑–±–∞–π—Å–∫–∏–π —Ä–∞–π–æ–Ω',
  '–¢—É—Ä–∫—Å–∏–±—Å–∫–∏–π —Ä–∞–π–æ–Ω',
  '–ê–ª–∞—Ç–∞—É—Å–∫–∏–π —Ä–∞–π–æ–Ω',
];

const SPECIALTIES = [
  '–¢–µ—Ä–∞–ø–µ–≤—Ç',
  '–ö–∞—Ä–¥–∏–æ–ª–æ–≥',
  '–ù–µ–≤—Ä–æ–ª–æ–≥',
  '–ü–µ–¥–∏–∞—Ç—Ä',
  '–•–∏—Ä—É—Ä–≥',
  '–ì–∏–Ω–µ–∫–æ–ª–æ–≥',
  '–û—Ñ—Ç–∞–ª—å–º–æ–ª–æ–≥',
  '–õ–û–†',
  '–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥',
  '–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥',
];

export default function RegisterForm() {
  const [role, setRole] = useState<'CLIENT' | 'MEDIC'>('CLIENT');
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    password: '',
    confirmPassword: '',
    specialty: '',
    experience: '',
    areas: [] as string[],
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleChange = (field: string, value: any) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleAreaToggle = (area: string) => {
    setFormData(prev => ({
      ...prev,
      areas: prev.areas.includes(area)
        ? prev.areas.filter(a => a !== area)
        : [...prev.areas, area]
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (formData.password !== formData.confirmPassword) {
      setError('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
      setLoading(false);
      return;
    }

    if (role === 'MEDIC' && (!formData.specialty || formData.areas.length === 0)) {
      setError('–î–ª—è –º–µ–¥–∏–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ —Ä–∞–π–æ–Ω—ã');
      setLoading(false);
      return;
    }

    try {
      const response = await fetch('http://localhost:3001/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: formData.name,
          email: formData.email,
          phone: formData.phone,
          password: formData.password,
          role,
          specialty: formData.specialty,
          experience: formData.experience,
          areas: formData.areas,
        }),
      });

      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
      document.cookie = `token=${data.token}; path=/; max-age=604800`; // 7 –¥–Ω–µ–π

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º
      alert(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${data.user.name}`);
      window.location.href = '/dashboard';
      
    } catch (err: any) {
      setError(err.message || '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="max-w-2xl w-full bg-white rounded-2xl shadow-xl p-8">
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="text-center mb-8">
          <div className="text-4xl mb-4">üî•</div>
          <h1 className="text-3xl font-bold text-gray-900 mb-2">
            –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
          </h1>
          <p className="text-gray-600">
            –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
          </p>
        </div>

        {/* –í—ã–±–æ—Ä —Ä–æ–ª–∏ */}
        <div className="mb-6">
          <label className="block text-sm font-medium text-gray-700 mb-3">
            –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å
          </label>
          <div className="grid grid-cols-2 gap-4">
            <button
              type="button"
              onClick={() => setRole('CLIENT')}
              className={`p-4 border-2 rounded-lg transition-all ${
                role === 'CLIENT'
                  ? 'border-blue-500 bg-blue-50'
                  : 'border-gray-300 hover:border-gray-400'
              }`}
            >
              <div className="text-2xl mb-2">üë§</div>
              <div className="font-medium">–ö–ª–∏–µ–Ω—Ç</div>
              <div className="text-xs text-gray-500">–ó–∞–∫–∞–∑—ã–≤–∞—é —É—Å–ª—É–≥–∏</div>
            </button>
            <button
              type="button"
              onClick={() => setRole('MEDIC')}
              className={`p-4 border-2 rounded-lg transition-all ${
                role === 'MEDIC'
                  ? 'border-blue-500 bg-blue-50'
                  : 'border-gray-300 hover:border-gray-400'
              }`}
            >
              <div className="text-2xl mb-2">üë®‚Äç‚öïÔ∏è</div>
              <div className="font-medium">–ú–µ–¥–∏–∫</div>
              <div className="text-xs text-gray-500">–û–∫–∞–∑—ã–≤–∞—é —É—Å–ª—É–≥–∏</div>
            </button>
          </div>
        </div>

        {/* –§–æ—Ä–º–∞ */}
        <form onSubmit={handleSubmit} className="space-y-4">
          
          {/* –ò–º—è */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –§–ò–û
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => handleChange('name', e.target.value)}
              className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
              required
            />
          </div>

          {/* Email –∏ –¢–µ–ª–µ—Ñ–æ–Ω */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Email
              </label>
              <input
                type="email"
                value={formData.email}
                onChange={(e) => handleChange('email', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="email@example.com"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –¢–µ–ª–µ—Ñ–æ–Ω
              </label>
              <input
                type="tel"
                value={formData.phone}
                onChange={(e) => handleChange('phone', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="+7 (777) 123-45-67"
                required
              />
            </div>
          </div>

          {/* –ü–∞—Ä–æ–ª–∏ */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ü–∞—Ä–æ–ª—å
              </label>
              <input
                type="password"
                value={formData.password}
                onChange={(e) => handleChange('password', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤"
                required
                minLength={6}
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å
              </label>
              <input
                type="password"
                value={formData.confirmPassword}
                onChange={(e) => handleChange('confirmPassword', e.target.value)}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                required
              />
            </div>
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –º–µ–¥–∏–∫–∞ */}
          {role === 'MEDIC' && (
            <>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
                  </label>
                  <select
                    value={formData.specialty}
                    onChange={(e) => handleChange('specialty', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    required
                  >
                    <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å</option>
                    {SPECIALTIES.map(spec => (
                      <option key={spec} value={spec}>{spec}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –°—Ç–∞–∂ (–ª–µ—Ç)
                  </label>
                  <input
                    type="number"
                    value={formData.experience}
                    onChange={(e) => handleChange('experience', e.target.value)}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    placeholder="5"
                    required
                    min="0"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  –†–∞–π–æ–Ω—ã –≤—ã–µ–∑–¥–∞
                </label>
                <div className="grid grid-cols-2 gap-2">
                  {AREAS.map(area => (
                    <label key={area} className="flex items-center p-2 border rounded cursor-pointer hover:bg-gray-50">
                      <input
                        type="checkbox"
                        checked={formData.areas.includes(area)}
                        onChange={() => handleAreaToggle(area)}
                        className="mr-2"
                      />
                      <span className="text-sm">{area}</span>
                    </label>
                  ))}
                </div>
              </div>
            </>
          )}

          {/* –û—à–∏–±–∫–∞ */}
          {error && (
            <div className="p-3 bg-red-50 border-l-4 border-red-500 rounded">
              <p className="text-red-700 text-sm">{error}</p>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
          <button
            type="submit"
            disabled={loading}
            className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white font-medium py-3 px-4 rounded-lg transition-colors"
          >
            {loading ? '–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º...' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è'}
          </button>
        </form>

        {/* –°—Å—ã–ª–∫–∞ –Ω–∞ –≤—Ö–æ–¥ */}
        <div className="mt-6 text-center">
          <p className="text-gray-600">
            –£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?{' '}
            <a 
              href="/auth/login" 
              className="text-blue-600 hover:text-blue-700 font-medium cursor-pointer"
            >
              –í–æ–π—Ç–∏
            </a>
          </p>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
        <div className="mt-4 text-center">
          <a 
            href="/" 
            className="text-gray-500 hover:text-gray-700 text-sm cursor-pointer"
          >
            ‚Üê –ù–∞–∑–∞–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          </a>
        </div>
      </div>
    </div>
  );
}